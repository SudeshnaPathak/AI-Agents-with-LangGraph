from dotenv import load_dotenv
load_dotenv()

from langchain_core.tools import StructuredTool
from langchain_tavily import TavilySearch
from langgraph.prebuilt import ToolNode
from schemas import AnswerQuestion, ReviseAnswer

tavily_tool = TavilySearch(
    max_results=5
)

#To run the search queries generated by the responses from AnwerQuestion tool and ReviseAnswer tool
def run_queries(search_queries: list[str], **kwargs):
    """Run the generated queries."""
    return tavily_tool.batch([{"query": query} for query in search_queries])

#ToolNode automatically analyzes the messages/states and will choose the correct tool to use based on the output of the previous tool.This is a very powerful feature of ToolNode.It can also be used to chain multiple tools together.

execute_tools = ToolNode(
    [
        StructuredTool.from_function(run_queries, name=AnswerQuestion.__name__),
        StructuredTool.from_function(run_queries, name=ReviseAnswer.__name__),
    ]
)